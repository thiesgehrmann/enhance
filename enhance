#!/usr/bin/env python2
import sys
from tools import *
from package_manager import PackageManager
import shutil
import os

help = """
Usage: env_builder command [params]

Commands:
- init profile_name
  initializes a directory for building an environment. Profiles can
  be found in the profile directory
- install [package]
  install package, or all required packages as indicated by the world
  file
- update [package]
  update (all) packages
"""

def help_and_exit():
    print help
    sys.exit(1)


def init(profile):
    oldmask = os.umask(0000)
    srcpath = get_src_path(init)

    if srcpath == os.getcwd():
        error("Cannnot initialize in source directory! Please create a separate directory for the environment")

    if os.path.isfile('profile.ini'):
        error("Directory already initalized!")

    profile_path = os.path.join(srcpath, 'profiles',profile)
    if not os.path.isfile(profile_path):
        print "Unknown profile '" + profile + "'. Chose one from: "
        profile_path = os.path.join(srcpath, 'profiles')
        for file in os.listdir(profile_path):
            print '- ' + file
        sys.exit(1)

    shutil.copyfile(profile_path, "profile.ini") 
    mkpath('sys_enhance/bin')
    mkpath('sys_enhance/lib64')
    
    if not os.path.exists('enhance'):
        os.symlink(os.path.join(srcpath,'enhance'), 'enhance')
    if not os.path.exists('sys_enhance/bin/enhance'):
        os.symlink(os.path.join(srcpath,'enhance'), 'sys_enhance/bin/enhance')
    if not os.path.exists('sys_enhance/lib'):
        oldpath = os.getcwd()
        os.chdir(os.path.join(os.getcwd(), 'sys_enhance'))
        os.symlink('lib64','lib')
        os.chdir(oldpath)
  
    envpath = os.path.join(srcpath,"paths")
    runCommand("cat " + envpath + " | sed s#ONAME#" + os.getcwd() + "#g > paths")
    
    envpath = os.path.join(srcpath,"start_enhance")
    runCommand("cat " + envpath + " | sed s#ONAME#" + os.getcwd() + "#g > start_enhance")
    runCommand("chmod 755 start_enhance")

    print "\033[32mEnhance, profile \033[34m\033[1m" + str(profile) + "\033[0m\033[32m initialized in \033[0m\033[33m" + os.getcwd()  + "\033[0m"
    list()
    os.umask(oldmask)

def list():
    p = PackageManager(get_src_path(init))

    print "Available applications:"
    l = [a for a in p.apps.values()]
    l.sort(key=lambda x: x.name)
    for a in l:
        print '- ' + str(a)

def install(packages):
    p = PackageManager(get_src_path(init))
    installs = set()
    if len(packages) == 1 and packages[0] == "all":
        packages = p.apps.keys()
    for package in packages:
        d = parse_dep(package)
        if len(d) > 1:
            p.addConstraint(d)
        installs.add(d[0])
    installs.update([a.name for a in p.getAppsByState("queued")])
    p.merge(installs)

if len(sys.argv) == 1:
    help_and_exit()

if sys.argv[1] == "init":
    if len(sys.argv) < 3:
        help_and_exit()
    init(sys.argv[2])
elif sys.argv[1] == "list":   
    list()
elif sys.argv[1] == "install":
    install(sys.argv[2:])
else:
    help_and_exit()

